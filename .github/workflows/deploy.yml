# name: Deploy to EC2

# on:
#   push:
#     branches: [ "main" ]

# jobs:
#   deploy:
#     # Run directly on self-hosted runner (the one we configured on EC2)
#     runs-on: self-hosted

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
      
#       - name: Show environment
#         run: env
#        #Later add the steps for docker build,login and push from the github folder
#       - name: Pull and Run Containers
#         working-directory: /home/ubuntu/fastapi_project
#         run: |
#           # Pull updated images
#           docker-compose pull
#           # Stop any running containers
#           docker-compose down
#           # Rebuild and run containers in detached mode
#           docker-compose up -d --build
#           # Show running containers
#           docker-compose ps
      
#       - name: Show Ngrok Logs
#         working-directory: /home/ubuntu/fastapi_project
#         run: |
#           # Display ngrok logs to get the public URL
#           docker-compose logs ngrok



name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Build Docker images and push to Docker Hub
      - name: Build and Push Docker Images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker build -t adesojialu/visiszipnov26_app:latest ./visis-backend/visis-app
          docker push adesojialu/visiszipnov26_app:latest

      # Step 3: Copy static files to EC2
      - name: Sync Static Files
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          rsync -e "ssh -o StrictHostKeyChecking=no" -avz ./visis-backend/visis-app/static/ $EC2_USER@$EC2_HOST:/home/ubuntu/fastapi_project/static/

      # Step 4: Copy docker-compose.local.yml to EC2 and Deploy Docker Compose
      - name: Copy Docker Compose File and Deploy Containers
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ./visis-backend/visis-app/docker-compose.local.yml $EC2_USER@$EC2_HOST:/home/ubuntu/fastapi_project/docker-compose.yml
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST "
            cd /home/ubuntu/fastapi_project &&
            docker-compose -f docker-compose.yml down --remove-orphans &&
            docker-compose -f docker-compose.yml up -d --build --cpus=\"2.0\" --memory=\"2g\" &&
            docker-compose ps
          "

      # Step 5: Check Docker logs
      - name: Show Logs
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST "
            docker logs fastapi_app &&
            docker logs nginx_proxy
          "

